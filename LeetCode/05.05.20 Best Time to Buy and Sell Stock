## Question
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

## Thinking


## My First Solution
```
#暴力求解，每两个数都要算
class Solution:
    
        
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices) > 0:
            profit = [prices[j] - prices[i] for i in range(len(prices)) for j in range(i,len(prices))]
        else:
            profit = [0]
        return max(profit)
```

## Best Solution
```
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if prices:
            maxprofit = 0
            minprice = float('Inf')

            for price in prices:
                if price < minprice:
                    minprice = price
                maxprofit = max(maxprofit, price - minprice)
                return maxprofit
        else:
            return 0
```

## Learning Section
[One - pass Algorithm](https://en.wikipedia.org/wiki/One-pass_algorithm)
精髓：在loop中将有意义的变量存储起来，便不用从头再来


